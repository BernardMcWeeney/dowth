---
// Timeline.astro
---

<div class="absolute bottom-24 left-0 w-full px-4 md:px-8 text-xs opacity-80 text-white md:block hidden my-8">
    <!-- Annual timeline container -->
    <div class="relative w-full mx-auto py-8 px-[5%]">
      <!-- Timeline bar -->
      <div class="h-[2px] w-full bg-white/30 relative">
        <!-- Current position marker (calculated by JS) -->
        <div id="current-date-marker" class="absolute top-1/2 w-3 h-3 rounded-full bg-amber-300 -translate-y-1/2 shadow-glow z-10 transition-all duration-500"></div>
        
        <!-- Evenly distributed season markers - 4 points only -->
        <!-- Winter Solstice (Start) -->
        <div class="absolute left-0 top-1/2 -translate-y-1/2 flex flex-col items-center">
          <div class="w-[2px] h-6 bg-white mb-3"></div>
          <span class="uppercase tracking-widest text-center block w-24">Winter Solstice<br/><span class="text-amber-200 font-light">Dec 21</span></span>
        </div>
        
        <!-- Spring Equinox (33%) -->
        <div class="absolute left-1/3 top-1/2 -translate-y-1/2 flex flex-col items-center">
          <div class="w-[2px] h-6 bg-white mb-3"></div>
          <span class="uppercase tracking-widest text-center block w-24">Spring Equinox<br/><span class="text-amber-200 font-light">Mar 20</span></span>
        </div>
        
        <!-- Summer Solstice (66%) -->
        <div class="absolute left-2/3 top-1/2 -translate-y-1/2 flex flex-col items-center">
          <div class="w-[2px] h-6 bg-white mb-3"></div>
          <span class="uppercase tracking-widest text-center block w-24">Summer Solstice<br/><span class="text-amber-200 font-light">Jun 21</span></span>
        </div>
        
        <!-- Autumn Equinox (100%) -->
        <div class="absolute right-0 top-1/2 -translate-y-1/2 flex flex-col items-center">
          <div class="w-[2px] h-6 bg-white mb-3"></div>
          <span class="uppercase tracking-widest text-center block w-24">Autumn Equinox<br/><span class="text-amber-200 font-light">Sep 23</span></span>
        </div>
        
        <!-- Small tick marks along the timeline -->
        <div class="absolute top-0 w-full flex justify-between">
          {Array.from({ length: 24 }).map((_, i) => (
            <div class="h-[4px] w-[1px] bg-white/50"></div>
          ))}
        </div>
      </div>
    </div>
  </div>
  
  <!-- Mobile version of the timeline -->
  <div class="absolute bottom-24 left-0 w-full px-4 md:hidden block text-center my-8">
    <div id="current-season-mobile" class="text-amber-200 text-sm uppercase tracking-widest mb-2"></div>
    <div class="text-white/80 text-xs mb-4"><span id="days-until-next-event"></span></div>
    <!-- Simple mobile timeline representation -->
    <div class="w-full mx-auto h-[2px] bg-white/30 relative mb-4 px-[5%]">
      <div id="current-date-marker-mobile" class="absolute top-1/2 w-3 h-3 rounded-full bg-amber-300 -translate-y-1/2 shadow-glow"></div>
      
      <!-- Small tick marks on mobile -->
      <div class="absolute top-0 w-full flex justify-between">
        {Array.from({ length: 12 }).map((_, i) => (
          <div class="h-[4px] w-[1px] bg-white/50"></div>
        ))}
      </div>
    </div>
    <div class="flex justify-between text-xs w-full mx-auto opacity-70">
      <span>Dec</span>
      <span>Mar</span>
      <span>Jun</span>
      <span>Sep</span>
    </div>
  </div>
  
  <script>
    // Calculate current position in the annual cycle
    function updateAnnualCycle() {
      const now = new Date();
      const currentYear = now.getFullYear();
      
      // Define solstices and equinoxes (approximate dates, can be adjusted for specific years)
      const winterSolstice = new Date(currentYear, 11, 21); // December 21
      const springEquinox = new Date(currentYear, 2, 20);   // March 20
      const summerSolstice = new Date(currentYear, 5, 21);  // June 21
      const autumnEquinox = new Date(currentYear, 8, 23);   // September 23
      const nextWinterSolstice = new Date(currentYear + 1, 11, 21); // December 21 of next year
      
      // Array of celestial events in chronological order
      const celestialEvents = [
        { name: "Winter Solstice", date: winterSolstice, season: "Winter" },
        { name: "Spring Equinox", date: springEquinox, season: "Spring" },
        { name: "Summer Solstice", date: summerSolstice, season: "Summer" },
        { name: "Autumn Equinox", date: autumnEquinox, season: "Autumn" }
      ];
      
      // Find current and next event
      let currentEvent = celestialEvents[0];
      let nextEvent = celestialEvents[1];
      
      // Determine current season and next event
      if (now > winterSolstice) {
        // We're past winter solstice of current year
        for (let i = 1; i < celestialEvents.length; i++) {
          if (now <= celestialEvents[i].date) {
            currentEvent = celestialEvents[i-1];
            nextEvent = celestialEvents[i];
            break;
          }
        }
      } else {
        // We're before the winter solstice of current year
        const prevWinterSolstice = new Date(currentYear - 1, 11, 21);
        const prevAutumnEquinox = new Date(currentYear - 1, 8, 23);
        
        if (now < winterSolstice && now > prevAutumnEquinox) {
          currentEvent = { name: "Autumn Equinox", date: prevAutumnEquinox, season: "Autumn" };
          nextEvent = { name: "Winter Solstice", date: winterSolstice, season: "Winter" };
        } else {
          // Find the appropriate events
          for (let i = 0; i < celestialEvents.length; i++) {
            if (now <= celestialEvents[i].date) {
              if (i === 0) {
                // If we're before the first event of the year, the previous event is the last of previous year
                currentEvent = { name: "Autumn Equinox", date: prevAutumnEquinox, season: "Autumn" };
              } else {
                currentEvent = celestialEvents[i-1];
              }
              nextEvent = celestialEvents[i];
              break;
            }
          }
        }
      }
      
      // Calculate days until next event
      const daysUntilNext = Math.ceil((nextEvent.date - now) / (1000 * 60 * 60 * 24));
      
      // Get current season
      let currentSeason = "";
      if (now >= winterSolstice || now < springEquinox) {
        currentSeason = "Winter";
      } else if (now >= springEquinox && now < summerSolstice) {
        currentSeason = "Spring";
      } else if (now >= summerSolstice && now < autumnEquinox) {
        currentSeason = "Summer";
      } else {
        currentSeason = "Autumn";
      }
      
      // Position marker on timeline based on day of year
      const yearProgress = calculateYearPercentage(now);
      const marker = document.getElementById('current-date-marker');
      const mobileMarker = document.getElementById('current-date-marker-mobile');
      
      if (marker) {
        marker.style.left = `${yearProgress}%`;
      }
      
      if (mobileMarker) {
        mobileMarker.style.left = `${yearProgress}%`;
      }
      
      // Update mobile view
      const seasonEl = document.getElementById('current-season-mobile');
      const daysEl = document.getElementById('days-until-next-event');
      
      if (seasonEl) {
        seasonEl.textContent = currentSeason;
      }
      
      if (daysEl) {
        daysEl.textContent = `${daysUntilNext} days until ${nextEvent.name}`;
      }
    }
    
    // Calculate percentage of year passed (0-100)
    function calculateYearPercentage(date) {
      const now = date || new Date();
      const start = new Date(now.getFullYear(), 0, 1); // Jan 1
      const end = new Date(now.getFullYear(), 11, 31); // Dec 31
      
      // Total milliseconds in the year
      const yearDuration = end - start;
      // Milliseconds elapsed so far
      const elapsed = now - start;
      
      // Calculate percentage
      const percentage = (elapsed / yearDuration) * 100;
      
      // Ensure the percentage is between 0 and 100
      return Math.min(Math.max(percentage, 0), 100);
    }
    
    // Call the function on page load
    document.addEventListener('DOMContentLoaded', () => {
      updateAnnualCycle();
      
      // Add shadow-glow style for the current date marker
      const style = document.createElement('style');
      style.innerHTML = `
        .shadow-glow {
          box-shadow: 0 0 8px rgba(251, 191, 36, 0.7), 0 0 16px rgba(251, 191, 36, 0.4);
        }
      `;
      document.head.appendChild(style);
    });
  </script>