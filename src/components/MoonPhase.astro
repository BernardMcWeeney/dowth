---
// MoonPhase.astro
const { ASTRONOMY_API_KEY } = import.meta.env;
---

<script define:vars={{ apiKey: ASTRONOMY_API_KEY }}>
  class MoonPhase extends HTMLElement {
    constructor() {
      super();
      this.fetchMoonData();
    }
    
    connectedCallback() {
      // Ensure DOM is ready before setting up event listeners
      setTimeout(() => this.setupEventListeners(), 0);
    }

    setupEventListeners() {
      console.log('Setting up moon event listeners');
      
      // Get DOM elements
      const iconWrapper = this.querySelector('.moon-icon-wrapper');
      const fullCard = this.querySelector('.moon-card');
      const closeBtn = this.querySelector('.moon-close-btn');
      
      console.log('Moon elements:', { 
        iconWrapper: !!iconWrapper, 
        fullCard: !!fullCard, 
        closeBtn: !!closeBtn 
      });
      
      if (iconWrapper && fullCard) {
        // Direct show/hide approach with inline styles
        iconWrapper.addEventListener('click', (e) => {
          console.log('Moon icon clicked');
          this.classList.add('is-expanded');
          fullCard.style.display = 'flex';
          fullCard.style.opacity = '1';
          iconWrapper.style.opacity = '0';
          iconWrapper.style.transform = 'scale(0)';
          e.stopPropagation();
        });
        
        if (closeBtn) {
          closeBtn.addEventListener('click', (e) => {
            console.log('Moon close clicked');
            this.classList.remove('is-expanded');
            fullCard.style.display = 'none';
            fullCard.style.opacity = '0';
            iconWrapper.style.opacity = '1';
            iconWrapper.style.transform = 'scale(1)';
            e.stopPropagation();
          });
        }
        
        // Close when clicking outside
        document.addEventListener('click', (e) => {
          if (this.classList.contains('is-expanded') && 
              !this.contains(e.target)) {
            console.log('Outside click - hiding moon card');
            this.classList.remove('is-expanded');
            fullCard.style.display = 'none';
            fullCard.style.opacity = '0';
            iconWrapper.style.opacity = '1';
            iconWrapper.style.transform = 'scale(1)';
          }
        });
      } else {
        console.error('Moon components not found - will retry');
        // Try again after a delay
        setTimeout(() => this.setupEventListeners(), 500);
      }
    }

    async fetchMoonData() {
      const lat = "53.7038";
      const long = "-6.4504";
      
      try {
        const response = await fetch(
          `https://api.ipgeolocation.io/astronomy?apiKey=${apiKey}&lat=${lat}&long=${long}`,
          { method: "GET", redirect: "follow" }
        );
        
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        
        const data = await response.json();
        this.renderMoonPhase(data);
      } catch (error) {
        console.error("Error fetching moon data:", error);
      }
    }

    renderMoonPhase(data) {
      if (!data) {
        console.error("Missing data from API response");
        return;
      }
      
      // Get elements
      const phaseNameEl = this.querySelector('[data-moon-phase-name]');
      const phasePercentEl = this.querySelector('[data-moon-phase-percent]');
      const moonEl = this.querySelector('[data-moon]');
      const moonIconEl = this.querySelector('[data-moon-icon]');
      const riseTimeEl = this.querySelector('[data-moon-rise]');
      const setTimeEl = this.querySelector('[data-moon-set]');
      const dateEl = this.querySelector('[data-date]');
      
      // Update text content
      if (phaseNameEl) phaseNameEl.textContent = this.formatPhaseName(data.moon_phase);
      if (phasePercentEl) {
        // Handle illumination percentage which comes as a string with sign
        const illumStr = data.moon_illumination_percentage || "0";
        const illumNum = Math.abs(parseFloat(illumStr));
        phasePercentEl.textContent = `${!isNaN(illumNum) ? illumNum : 0}%`;
      }
      if (riseTimeEl) riseTimeEl.textContent = data.moonrise || "--:--";
      if (setTimeEl) setTimeEl.textContent = data.moonset || "--:--";
      if (dateEl && data.date) dateEl.textContent = this.formatDate(data.date);
      
      // Update moon visual
      if (moonEl) {
        this.updateMoonVisualization(moonEl, data.moon_phase, data.moon_illumination_percentage);
      }
      
      // Update mini moon icon
      if (moonIconEl) {
        this.updateMoonVisualization(moonIconEl, data.moon_phase, data.moon_illumination_percentage);
      }
      
      // Show the component
      this.classList.remove('opacity-0');
      this.classList.add('opacity-100');
    }
    
    formatDate(dateStr) {
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-IE', { 
          month: 'short', 
          day: 'numeric' 
        });
      } catch (e) {
        return dateStr;
      }
    }
    
    formatPhaseName(phaseName) {
      if (!phaseName) return "Unknown";
      
      // Convert from API format (e.g., "LAST_QUARTER") to display format (e.g., "Last Quarter")
      return phaseName
        .split('_')
        .map(word => word.charAt(0) + word.slice(1).toLowerCase())
        .join(' ');
    }
    
    updateMoonVisualization(moonEl, phaseName, illuminationStr) {
      // Create a gradient based on the phase
      let gradient;
      
      // Calculate a phase value from 0-1 based on the phase name
      const phaseValue = this.getPhaseValueFromName(phaseName);
      
      // Convert illumination percentage string to a number between 0-1
      const illuminationStr2 = illuminationStr || "0";
      const illuminationNum = Math.abs(parseFloat(illuminationStr2)) / 100;
      const illumination = !isNaN(illuminationNum) ? illuminationNum : 0;
      
      // Normalize phase to 0-1
      const normalizedPhase = phaseValue % 1;
      
      if (normalizedPhase < 0.5) {
        // Waxing moon (right side growing)
        const rightPercentage = normalizedPhase * 2 * 100;
        gradient = `radial-gradient(circle at right, 
          transparent ${Math.max(0, 100 - rightPercentage)}%, 
          rgb(226 232 240) ${Math.max(0, 100 - rightPercentage)}%)`;
      } else {
        // Waning moon (left side shrinking)
        const leftPercentage = (normalizedPhase - 0.5) * 2 * 100;
        gradient = `radial-gradient(circle at left, 
          transparent ${leftPercentage}%, 
          rgb(226 232 240) ${leftPercentage}%)`;
      }
      
      // Apply the gradient mask to the moon
      moonEl.style.maskImage = gradient;
      moonEl.style.webkitMaskImage = gradient;
      
      // Adjust opacity for the illumination
      moonEl.style.opacity = 0.2 + (illumination * 0.8);
    }
    
    getPhaseValueFromName(phaseName) {
      // Map phase names to values between 0-1
      const phaseMap = {
        'NEW_MOON': 0,
        'WAXING_CRESCENT': 0.125,
        'FIRST_QUARTER': 0.25,
        'WAXING_GIBBOUS': 0.375,
        'FULL_MOON': 0.5,
        'WANING_GIBBOUS': 0.625,
        'LAST_QUARTER': 0.75,
        'WANING_CRESCENT': 0.875
      };
      
      return phaseMap[phaseName] !== undefined ? phaseMap[phaseName] : 0;
    }
  }

  customElements.define('moon-phase', MoonPhase);
</script>

<moon-phase class="fixed top-4 right-4 z-50 transition-all duration-300 opacity-0">
  <!-- Collapsed moon icon -->
  <div class="moon-icon-wrapper cursor-pointer bg-slate-900/80 rounded-full p-3 shadow-lg hover:bg-slate-800/80 transition-colors duration-300">
    <div class="moon-icon-container relative">
      <div 
        data-moon-icon 
        class="h-10 w-10 rounded-full bg-slate-200 shadow-inner"
      ></div>
    </div>
  </div>

  <!-- Expanded moon card -->
  <div class="moon-card absolute top-0 right-0 opacity-0 hidden p-4 rounded-xl bg-slate-900/80 shadow-lg text-white md:w-72 mt-12 select-none" style="display: none;">
    <button class="moon-close-btn absolute top-2 right-2 text-slate-400 hover:text-white transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    <div class="flex items-center justify-center mb-3">
      <div class="moon-wrapper relative mr-4">
        <div 
          data-moon 
          class="h-16 w-16 rounded-full bg-slate-200 shadow-inner"
        ></div>
      </div>
      <div class="moon-info">
        <p class="text-xs text-slate-400" data-date>--/--</p>
        <h2 class="text-xl font-medium" data-moon-phase-name>Loading...</h2>
        <p class="text-sm text-slate-400">Illumination: <span data-moon-phase-percent>-</span></p>
      </div>
    </div>
    
    <div class="moon-times grid grid-cols-2 gap-6 w-full mt-4 text-center">
      <div class="moon-rise">
        <p class="text-slate-400 text-sm">Rise</p>
        <p class="font-medium text-base" data-moon-rise>--:--</p>
      </div>
      <div class="moon-set">
        <p class="text-slate-400 text-sm">Set</p>
        <p class="font-medium text-base" data-moon-set>--:--</p>
      </div>
    </div>
  </div>
</moon-phase>

<style>
  .moon, [data-moon-icon] {
    box-shadow: inset -3px -3px 8px rgba(0,0,0,0.4);
  }
  
  .moon-card {
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255, 255, 255, 0.08);
  }
  
  /* Create starry background effect */
  .moon-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 16px 16px;
    opacity: 0.3;
    z-index: -1;
    pointer-events: none;
    border-radius: inherit;
  }
  
  /* Transition for collapsible state */
  moon-phase.is-expanded .moon-card {
    display: flex !important;
    opacity: 1 !important;
    transition: opacity 0.3s ease;
  }
  
  moon-phase.is-expanded .moon-icon-wrapper {
    transform: scale(0);
    opacity: 0;
  }
</style>