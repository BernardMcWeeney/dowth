---
// MoonPhase.astro
const { ASTRONOMY_API_KEY } = import.meta.env;

// Dowth coordinates (hardcoded)
const COORDINATES = {
  lat: "53.7038",
  long: "-6.4504",
};
---

<div id="moon-position-component" class="opacity-0 transition-opacity duration-500">
  <!-- Moon icon button - Fixed at top right -->
  <button id="moon-icon-button" class="fixed top-4 right-4 z-50 p-3 bg-slate-900/90 hover:bg-slate-800/90 rounded-full shadow-lg border border-slate-500/30 transition-colors duration-300 flex items-center justify-center">
    <div class="w-7 h-7 md:w-8 md:h-8 rounded-full bg-slate-200 flex items-center justify-center" id="moon-icon">
      <!-- Moon icon is styled with gradient via JS -->
    </div>
  </button>

  <!-- Backdrop -->
  <div id="moon-backdrop" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-40 hidden opacity-0 transition-opacity duration-300"></div>
  
  <!-- Modal -->
  <div id="moon-modal" class="fixed z-50 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-sm hidden opacity-0 scale-95 transition-all duration-300">
    <div class="p-4 bg-slate-900/90 backdrop-blur-md border border-slate-500/20 rounded-xl shadow-xl text-white">
      <!-- Close button -->
      <button id="moon-close-btn" class="absolute top-3 right-3 text-slate-300 hover:text-white p-1 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <!-- Header with date and phase info -->
      <div class="text-center mb-4">
        <div class="flex justify-center items-center gap-3">
          <p class="text-xs text-slate-300" id="moon-date">--/--</p>
          <span class="text-xs text-slate-500">•</span>
          <p class="text-xs text-slate-300">Illumination: <span id="moon-illumination" class="font-medium">--%</span></p>
        </div>
        <h2 class="text-lg font-medium mt-1">Moon Phase · Dowth</h2>
        <p class="text-sm text-slate-300 mt-1" id="moon-phase-name">Loading...</p>
      </div>
      
      <!-- Moon visualization -->
      <div class="flex justify-center mb-6">
        <div class="w-24 h-24 rounded-full bg-slate-200 shadow-inner" id="moon-visual"></div>
      </div>
      
      <!-- Moon rise and set times -->
      <div class="grid grid-cols-2 gap-4 text-center">
        <div>
          <p class="text-slate-400 text-xs">Rise</p>
          <p class="font-medium" id="moon-rise">--:--</p>
        </div>
        <div>
          <p class="text-slate-400 text-xs">Set</p>
          <p class="font-medium" id="moon-set">--:--</p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Moon styling */
  #moon-visual, #moon-icon {
    box-shadow: inset -3px -3px 8px rgba(0,0,0,0.4);
  }
  
  /* Create starry background effect */
  #moon-modal > div::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
    background-size: 16px 16px;
    opacity: 0.3;
    z-index: -1;
    pointer-events: none;
    border-radius: inherit;
  }
</style>

<script define:vars={{ apiKey: ASTRONOMY_API_KEY, coordinates: COORDINATES }}>
// IIFE to avoid polluting global scope
(function() {
  // DOM elements
  const elements = {
    component: document.getElementById('moon-position-component'),
    iconButton: document.getElementById('moon-icon-button'),
    modal: document.getElementById('moon-modal'),
    closeBtn: document.getElementById('moon-close-btn'),
    backdrop: document.getElementById('moon-backdrop'),
    moonDate: document.getElementById('moon-date'),
    moonRise: document.getElementById('moon-rise'),
    moonSet: document.getElementById('moon-set'),
    moonIllumination: document.getElementById('moon-illumination'),
    moonPhaseName: document.getElementById('moon-phase-name'),
    moonVisual: document.getElementById('moon-visual'),
    moonIcon: document.getElementById('moon-icon')
  };
  
  // Show the icon button immediately
  if (elements.iconButton) {
    elements.iconButton.style.opacity = '1';
    elements.iconButton.style.display = 'flex';
  }
  
  // Setup modal functionality
  function setupModalEvents() {
    if (!elements.iconButton || !elements.modal || !elements.backdrop) return;
    
    elements.iconButton.addEventListener('click', openModal);
    elements.closeBtn?.addEventListener('click', closeModal);
    elements.backdrop.addEventListener('click', closeModal);
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && !elements.modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  }
  
  function openModal() {
    elements.modal.classList.remove('hidden');
    elements.backdrop.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Animate in
    setTimeout(() => {
      elements.backdrop.classList.remove('opacity-0');
      elements.modal.classList.remove('opacity-0', 'scale-95');
    }, 10);
  }
  
  function closeModal() {
    elements.backdrop.classList.add('opacity-0');
    elements.modal.classList.add('opacity-0', 'scale-95');
    
    // Wait for animation before hiding
    setTimeout(() => {
      elements.modal.classList.add('hidden');
      elements.backdrop.classList.add('hidden');
      document.body.style.overflow = '';
    }, 300);
  }
  
  // Moon phase utilities
  function formatPhaseName(phaseName) {
    if (!phaseName) return "Unknown";
    
    // Convert from API format (e.g., "LAST_QUARTER") to display format (e.g., "Last Quarter")
    return phaseName
      .split('_')
      .map(word => word.charAt(0) + word.slice(1).toLowerCase())
      .join(' ');
  }
  
  function formatDate(dateStr) {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-IE', { 
        month: 'short', 
        day: 'numeric' 
      });
    } catch (e) {
      return dateStr;
    }
  }
  
  function getPhaseValueFromName(phaseName) {
    // Map phase names to values between 0-1
    const phaseMap = {
      'NEW_MOON': 0,
      'WAXING_CRESCENT': 0.125,
      'FIRST_QUARTER': 0.25,
      'WAXING_GIBBOUS': 0.375,
      'FULL_MOON': 0.5,
      'WANING_GIBBOUS': 0.625,
      'LAST_QUARTER': 0.75,
      'WANING_CRESCENT': 0.875
    };
    
    return phaseMap[phaseName] !== undefined ? phaseMap[phaseName] : 0;
  }
  
  function updateMoonVisualization(moonEl, phaseName, illuminationStr) {
    if (!moonEl) return;
    
    // Calculate a phase value from 0-1 based on the phase name
    const phaseValue = getPhaseValueFromName(phaseName);
    
    // Convert illumination percentage string to a number between 0-1
    const illuminationStr2 = illuminationStr || "0";
    const illuminationNum = Math.abs(parseFloat(illuminationStr2)) / 100;
    const illumination = !isNaN(illuminationNum) ? illuminationNum : 0;
    
    // Normalize phase to 0-1
    const normalizedPhase = phaseValue % 1;
    
    let gradient;
    if (normalizedPhase < 0.5) {
      // Waxing moon (right side growing)
      const rightPercentage = normalizedPhase * 2 * 100;
      gradient = `radial-gradient(circle at right, 
        transparent ${Math.max(0, 100 - rightPercentage)}%, 
        rgb(226 232 240) ${Math.max(0, 100 - rightPercentage)}%)`;
    } else {
      // Waning moon (left side shrinking)
      const leftPercentage = (normalizedPhase - 0.5) * 2 * 100;
      gradient = `radial-gradient(circle at left, 
        transparent ${leftPercentage}%, 
        rgb(226 232 240) ${leftPercentage}%)`;
    }
    
    // Apply the gradient mask to the moon
    moonEl.style.maskImage = gradient;
    moonEl.style.webkitMaskImage = gradient;
    
    // Adjust opacity for the illumination
    moonEl.style.opacity = 0.2 + (illumination * 0.8);
  }
  
  // Data fetching and rendering
  async function fetchMoonData() {
    try {
      const response = await fetch(
        `https://api.ipgeolocation.io/astronomy?apiKey=${apiKey}&lat=${coordinates.lat}&long=${coordinates.long}`
      );
      
      if (!response.ok) throw new Error('Network response was not ok');
      
      const data = await response.json();
      renderMoonData(data);
    } catch (error) {
      console.error("Error fetching moon data:", error);
      // Show component anyway with default values
      elements.component.classList.remove('opacity-0');
    }
  }
  
  function renderMoonData(data) {
    if (!data) return;
    
    // Update text elements
    if (elements.moonPhaseName) {
      elements.moonPhaseName.textContent = formatPhaseName(data.moon_phase);
    }
    
    if (elements.moonIllumination) {
      // Handle illumination percentage which comes as a string with sign
      const illumStr = data.moon_illumination_percentage || "0";
      const illumNum = Math.abs(parseFloat(illumStr));
      elements.moonIllumination.textContent = `${!isNaN(illumNum) ? illumNum : 0}%`;
    }
    
    if (elements.moonRise) elements.moonRise.textContent = data.moonrise || "--:--";
    if (elements.moonSet) elements.moonSet.textContent = data.moonset || "--:--";
    if (elements.moonDate && data.date) elements.moonDate.textContent = formatDate(data.date);
    
    // Update moon visualizations
    if (elements.moonVisual) {
      updateMoonVisualization(elements.moonVisual, data.moon_phase, data.moon_illumination_percentage);
    }
    
    if (elements.moonIcon) {
      updateMoonVisualization(elements.moonIcon, data.moon_phase, data.moon_illumination_percentage);
    }
    
    // Show the component
    elements.component.classList.remove('opacity-0');
  }
  
  // Initialize
  function init() {
    setupModalEvents();
    fetchMoonData();
  }
  
  // Start everything
  init();
})();
</script>