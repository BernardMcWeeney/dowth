---
// SunPosition.astro
const { ASTRONOMY_API_KEY } = import.meta.env;

// Dowth coordinates (hardcoded)
const COORDINATES = {
  lat: "53.7038",
  long: "-6.4504",
};
---

<div id="sun-position-component" class="opacity-0 transition-opacity duration-500">
  <!-- Sun icon button - Fixed at top left -->
  <button id="sun-icon-button" class="fixed top-4 left-4 z-50 p-3 bg-amber-900/90 hover:bg-amber-800/90 rounded-full shadow-lg border border-amber-500/30 transition-colors duration-300 flex items-center justify-center">
    <div class="w-7 h-7 md:w-8 md:h-8 rounded-full bg-amber-300 flex items-center justify-center">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-amber-900">
        <circle cx="12" cy="12" r="5"></circle>
        <line x1="12" y1="1" x2="12" y2="3"></line>
        <line x1="12" y1="21" x2="12" y2="23"></line>
        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
        <line x1="1" y1="12" x2="3" y2="12"></line>
        <line x1="21" y1="12" x2="23" y2="12"></line>
        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
      </svg>
    </div>
  </button>

  <!-- Backdrop -->
  <div id="sun-backdrop" class="fixed inset-0 bg-black/40 backdrop-blur-sm z-40 hidden opacity-0 transition-opacity duration-300"></div>
  
  <!-- Modal -->
  <div id="sun-modal" class="fixed z-50 top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-[90%] max-w-sm hidden opacity-0 scale-95 transition-all duration-300">
    <div class="p-4 bg-amber-900/90 backdrop-blur-md border border-amber-500/20 rounded-xl shadow-xl text-white">
      <!-- Close button -->
      <button id="sun-close-btn" class="absolute top-3 right-3 text-amber-200 hover:text-white p-1 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <!-- Header with date and day length -->
      <div class="text-center mb-4">
        <div class="flex justify-center items-center gap-3">
          <p class="text-xs text-amber-200" id="sun-date">--/--</p>
          <span class="text-xs text-amber-200/50">•</span>
          <p class="text-xs text-amber-200">Day Length: <span id="day-length" class="font-medium">--h --m</span></p>
        </div>
        <h2 class="text-lg font-medium mt-1">Sun Position · Dowth</h2>
      </div>
      
      <!-- Sun arc visualization -->
      <div class="relative">
        <!-- Timeline bar -->
        <div class="h-2 bg-amber-700/40 rounded-full overflow-hidden relative">
          <!-- Daytime segment -->
          <div id="daytime-segment" class="absolute top-0 h-full bg-gradient-to-r from-amber-500/70 via-amber-400 to-amber-500/70 rounded-full"></div>
        </div>
        
        <!-- Sun position indicator -->
        <div id="sun-position-indicator" class="absolute top-0 -mt-1.5 transition-all duration-500">
          <div class="w-5 h-5 rounded-full bg-amber-300 shadow-lg flex items-center justify-center">
            <div class="w-3 h-3 rounded-full bg-amber-500"></div>
          </div>
        </div>
        
        <!-- Labels with times -->
        <div class="flex justify-between mt-5 text-xs text-amber-200/80">
          <div class="text-center">
            <span>Sunrise</span>
            <p id="sun-rise" class="font-medium text-amber-100">--:--</p>
          </div>
          <div class="text-center">
            <span>Midday</span>
            <p id="sun-midday" class="font-medium text-amber-100">--:--</p>
          </div>
          <div class="text-center">
            <span>Sunset</span>
            <p id="sun-set" class="font-medium text-amber-100">--:--</p>
          </div>
        </div>
      </div>
      
      <!-- Additional spacing at the bottom -->
      <div class="h-4"></div>
    </div>
  </div>
</div>

<script define:vars={{ apiKey: ASTRONOMY_API_KEY, coordinates: COORDINATES }}>
// IIFE to avoid polluting global scope
(function() {
  // DOM elements
  const elements = {
    component: document.getElementById('sun-position-component'),
    iconButton: document.getElementById('sun-icon-button'),
    modal: document.getElementById('sun-modal'),
    closeBtn: document.getElementById('sun-close-btn'),
    backdrop: document.getElementById('sun-backdrop'),
    sunDate: document.getElementById('sun-date'),
    sunRise: document.getElementById('sun-rise'),
    sunSet: document.getElementById('sun-set'),
    sunMidday: document.getElementById('sun-midday'),
    dayLength: document.getElementById('day-length'),
    indicator: document.getElementById('sun-position-indicator'),
    daytimeSegment: document.getElementById('daytime-segment')
  };
  
  // Show the icon button immediately
  if (elements.iconButton) {
    elements.iconButton.style.opacity = '1';
    elements.iconButton.style.display = 'flex';
  }
  
  // Setup modal functionality
  function setupModalEvents() {
    if (!elements.iconButton || !elements.modal || !elements.backdrop) return;
    
    elements.iconButton.addEventListener('click', openModal);
    elements.closeBtn?.addEventListener('click', closeModal);
    elements.backdrop.addEventListener('click', closeModal);
    document.addEventListener('keydown', e => {
      if (e.key === 'Escape' && !elements.modal.classList.contains('hidden')) {
        closeModal();
      }
    });
  }
  
  function openModal() {
    elements.modal.classList.remove('hidden');
    elements.backdrop.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Animate in
    setTimeout(() => {
      elements.backdrop.classList.remove('opacity-0');
      elements.modal.classList.remove('opacity-0', 'scale-95');
    }, 10);
  }
  
  function closeModal() {
    elements.backdrop.classList.add('opacity-0');
    elements.modal.classList.add('opacity-0', 'scale-95');
    
    // Wait for animation before hiding
    setTimeout(() => {
      elements.modal.classList.add('hidden');
      elements.backdrop.classList.add('hidden');
      document.body.style.overflow = '';
    }, 300);
  }
  
  // Time parsing and formatting
  function parseTimeString(timeStr) {
    if (!timeStr || timeStr === '--:--') return null;
    
    const parts = timeStr.split(':');
    if (parts.length !== 2) return null;
    
    let hours = parseInt(parts[0], 10);
    let minutesPart = parts[1];
    
    // Handle AM/PM if present
    let minutes;
    if (minutesPart.includes('PM')) {
      minutes = parseInt(minutesPart.split(' ')[0], 10);
      if (hours < 12) hours += 12;
    } else if (minutesPart.includes('AM')) {
      minutes = parseInt(minutesPart.split(' ')[0], 10);
      if (hours === 12) hours = 0;
    } else {
      minutes = parseInt(minutesPart, 10);
    }
    
    return { 
      hours, 
      minutes,
      totalMinutes: hours * 60 + minutes,
      formatted: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
    };
  }
  
  function calculateMidday(sunrise, sunset) {
    if (!sunrise || !sunset) return null;
    
    const middayMinutes = Math.floor((sunrise.totalMinutes + sunset.totalMinutes) / 2);
    const hours = Math.floor(middayMinutes / 60);
    const minutes = middayMinutes % 60;
    
    return {
      hours,
      minutes,
      totalMinutes: middayMinutes,
      formatted: `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
    };
  }
  
  function formatDate(dateStr) {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString('en-IE', { day: 'numeric', month: 'short' });
    } catch (e) {
      return dateStr;
    }
  }
  
  function calculateDayLength(sunrise, sunset) {
    if (!sunrise || !sunset) return 'Unknown';
    
    const dayLengthMinutes = sunset.totalMinutes - sunrise.totalMinutes;
    const hours = Math.floor(dayLengthMinutes / 60);
    const minutes = dayLengthMinutes % 60;
    
    return `${hours}h ${minutes}m`;
  }
  
  // Sun position visualization
  function updateSunVisualizations(sunrise, sunset) {
    if (!elements.indicator || !elements.daytimeSegment) return;
    if (!sunrise || !sunset) return;
    
    try {
      const now = new Date();
      const currentMinutes = now.getHours() * 60 + now.getMinutes();
      
      // Timeline represents 24 hours (1440 minutes)
      const dayMinutes = 24 * 60;
      
      // Calculate percentages for positioning
      const sunrisePercent = (sunrise.totalMinutes / dayMinutes) * 100;
      const sunsetPercent = (sunset.totalMinutes / dayMinutes) * 100;
      const currentPercent = (currentMinutes / dayMinutes) * 100;
      
      // Position daytime segment
      elements.daytimeSegment.style.left = `${sunrisePercent}%`;
      elements.daytimeSegment.style.width = `${sunsetPercent - sunrisePercent}%`;
      
      // Position the sun indicator based on current time
      elements.indicator.style.left = `${currentPercent}%`;
      
      // Update indicator appearance based on day/night
      const isDaytime = currentMinutes >= sunrise.totalMinutes && currentMinutes <= sunset.totalMinutes;
      const innerCircle = elements.indicator.querySelector('div');
      
      if (innerCircle) {
        innerCircle.classList.toggle('bg-amber-300', isDaytime);
        innerCircle.classList.toggle('bg-amber-900/50', !isDaytime);
      }
    } catch (e) {
      console.error('Error updating sun visualizations:', e);
    }
  }
  
  // Data fetching and rendering
  async function fetchSunData() {
    try {
      const response = await fetch(
        `https://api.ipgeolocation.io/astronomy?apiKey=${apiKey}&lat=${coordinates.lat}&long=${coordinates.long}`
      );
      
      if (!response.ok) throw new Error('Network response was not ok');
      
      const data = await response.json();
      renderSunData(data);
    } catch (error) {
      console.error("Error fetching sun data:", error);
      // Show component anyway with default values
      elements.component.classList.remove('opacity-0');
    }
  }
  
  function renderSunData(data) {
    if (!data) return;
    
    // Parse times
    const sunrise = parseTimeString(data.sunrise || "06:00");
    const sunset = parseTimeString(data.sunset || "18:00");
    const midday = calculateMidday(sunrise, sunset);
    
    // Update DOM elements
    if (elements.sunRise) elements.sunRise.textContent = data.sunrise || "--:--";
    if (elements.sunSet) elements.sunSet.textContent = data.sunset || "--:--";
    if (elements.sunDate) elements.sunDate.textContent = formatDate(data.date || new Date());
    if (elements.sunMidday && midday) elements.sunMidday.textContent = midday.formatted;
    
    // Calculate and display day length
    if (elements.dayLength) {
      elements.dayLength.textContent = data.day_length || calculateDayLength(sunrise, sunset);
    }
    
    // Update sun position visualizations
    updateSunVisualizations(sunrise, sunset);
    
    // Show the component
    elements.component.classList.remove('opacity-0');
  }
  
  // Init
  function init() {
    setupModalEvents();
    fetchSunData();
    
    // Update position every minute
    setInterval(() => {
      const sunrise = parseTimeString(elements.sunRise?.textContent);
      const sunset = parseTimeString(elements.sunSet?.textContent);
      if (sunrise && sunset) {
        updateSunVisualizations(sunrise, sunset);
      }
    }, 60000);
  }
  
  // Execute everything
  init();
})();
</script>