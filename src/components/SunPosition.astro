---
// SunPosition.astro
const { ASTRONOMY_API_KEY } = import.meta.env;
---

<script define:vars={{ apiKey: ASTRONOMY_API_KEY }}>
  class SunPosition extends HTMLElement {
    constructor() {
      super();
      this.fetchSunData();
    }
    
    connectedCallback() {
      // Ensure DOM is ready before setting up event listeners
      setTimeout(() => this.setupEventListeners(), 0);
    }

    setupEventListeners() {
      console.log('Setting up sun event listeners');
      
      // Get DOM elements
      const iconWrapper = this.querySelector('.sun-icon-wrapper');
      const fullCard = this.querySelector('.sun-card');
      const closeBtn = this.querySelector('.sun-close-btn');
      
      console.log('Sun elements:', { 
        iconWrapper: !!iconWrapper, 
        fullCard: !!fullCard, 
        closeBtn: !!closeBtn 
      });
      
      if (iconWrapper && fullCard) {
        // Direct show/hide approach with inline styles
        iconWrapper.addEventListener('click', (e) => {
          console.log('Sun icon clicked');
          this.classList.add('is-expanded');
          fullCard.style.display = 'flex';
          fullCard.style.opacity = '1';
          iconWrapper.style.opacity = '0';
          iconWrapper.style.transform = 'scale(0)';
          e.stopPropagation();
        });
        
        if (closeBtn) {
          closeBtn.addEventListener('click', (e) => {
            console.log('Sun close clicked');
            this.classList.remove('is-expanded');
            fullCard.style.display = 'none';
            fullCard.style.opacity = '0';
            iconWrapper.style.opacity = '1';
            iconWrapper.style.transform = 'scale(1)';
            e.stopPropagation();
          });
        }
        
        // Close when clicking outside
        document.addEventListener('click', (e) => {
          if (this.classList.contains('is-expanded') && 
              !this.contains(e.target)) {
            console.log('Outside click - hiding sun card');
            this.classList.remove('is-expanded');
            fullCard.style.display = 'none';
            fullCard.style.opacity = '0';
            iconWrapper.style.opacity = '1';
            iconWrapper.style.transform = 'scale(1)';
          }
        });
      } else {
        console.error('Sun components not found - will retry');
        // Try again after a delay
        setTimeout(() => this.setupEventListeners(), 500);
      }
    }

    async fetchSunData() {
      const lat = "53.7038";
      const long = "-6.4504";
      
      try {
        const response = await fetch(
          `https://api.ipgeolocation.io/astronomy?apiKey=${apiKey}&lat=${lat}&long=${long}`,
          { method: "GET", redirect: "follow" }
        );
        
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        
        const data = await response.json();
        this.renderSunData(data);
      } catch (error) {
        console.error("Error fetching sun data:", error);
      }
    }

    renderSunData(data) {
      if (!data) {
        console.error("Missing data from API response");
        return;
      }
      
      // Get elements
      const sunriseEl = this.querySelector('[data-sun-rise]');
      const sunsetEl = this.querySelector('[data-sun-set]');
      const dayLengthEl = this.querySelector('[data-day-length]');
      const dateEl = this.querySelector('[data-date]');
      
      // Update text content
      if (sunriseEl) sunriseEl.textContent = data.sunrise || "--:--";
      if (sunsetEl) sunsetEl.textContent = data.sunset || "--:--";
      if (dateEl && data.date) dateEl.textContent = this.formatDate(data.date);
      
      // Calculate day length if missing
      if (dayLengthEl) {
        if (data.day_length) {
          dayLengthEl.textContent = data.day_length;
        } else if (data.sunrise && data.sunset) {
          // Calculate day length from sunrise and sunset if available
          try {
            const sunriseTime = this.parseTimeString(data.sunrise);
            const sunsetTime = this.parseTimeString(data.sunset);
            
            if (sunriseTime && sunsetTime) {
              const dayLengthMinutes = (sunsetTime.hours * 60 + sunsetTime.minutes) - 
                                      (sunriseTime.hours * 60 + sunriseTime.minutes);
              
              const hours = Math.floor(dayLengthMinutes / 60);
              const minutes = dayLengthMinutes % 60;
              
              dayLengthEl.textContent = `${hours}h ${minutes}m`;
            } else {
              dayLengthEl.textContent = "Unknown";
            }
          } catch (e) {
            dayLengthEl.textContent = "Unknown";
          }
        } else {
          dayLengthEl.textContent = "Unknown";
        }
      }
      
      // Update sun position indicator
      this.updateSunPosition(data);
      
      // Show the component
      this.classList.remove('opacity-0');
      this.classList.add('opacity-100');
    }
    
    parseTimeString(timeStr) {
      if (!timeStr) return null;
      
      // Handle format like "06:30" or "6:30 AM"
      const parts = timeStr.split(':');
      if (parts.length !== 2) return null;
      
      let hours = parseInt(parts[0], 10);
      let minutesPart = parts[1];
      
      // Handle AM/PM if present
      let minutes;
      if (minutesPart.includes('PM')) {
        minutes = parseInt(minutesPart.split(' ')[0], 10);
        if (hours < 12) hours += 12;
      } else if (minutesPart.includes('AM')) {
        minutes = parseInt(minutesPart.split(' ')[0], 10);
        if (hours === 12) hours = 0;
      } else {
        minutes = parseInt(minutesPart, 10);
      }
      
      return { hours, minutes };
    }
    
    updateSunPosition(data) {
      const sunPositionIndicator = this.querySelector('.sun-position-indicator');
      if (!sunPositionIndicator) return;
      
      try {
        const now = new Date();
        const currentHour = now.getHours();
        const currentMinute = now.getMinutes();
        
        const sunrise = this.parseTimeString(data.sunrise);
        const sunset = this.parseTimeString(data.sunset);
        
        if (!sunrise || !sunset) return;
        
        // Convert times to minutes
        const sunriseMinutes = sunrise.hours * 60 + sunrise.minutes;
        const sunsetMinutes = sunset.hours * 60 + sunset.minutes;
        const currentMinutes = currentHour * 60 + currentMinute;
        
        // Calculate position (0 to 1)
        let position;
        if (currentMinutes < sunriseMinutes) {
          // Before sunrise
          position = 0;
        } else if (currentMinutes > sunsetMinutes) {
          // After sunset
          position = 1;
        } else {
          // During the day
          position = (currentMinutes - sunriseMinutes) / (sunsetMinutes - sunriseMinutes);
        }
        
        // Set the position on the arc
        sunPositionIndicator.style.left = `${position * 100}%`;
        
        // Change opacity based on day/night
        const sunIcon = this.querySelector('.sun-icon');
        if (sunIcon) {
          if (currentMinutes >= sunriseMinutes && currentMinutes <= sunsetMinutes) {
            sunIcon.style.opacity = "1";
          } else {
            sunIcon.style.opacity = "0.5";
          }
        }
      } catch (e) {
        console.error('Error updating sun position:', e);
      }
    }
    
    formatDate(dateStr) {
      try {
        const date = new Date(dateStr);
        return date.toLocaleDateString('en-IE', { 
          month: 'short', 
          day: 'numeric' 
        });
      } catch (e) {
        return dateStr;
      }
    }
  }

  customElements.define('sun-position', SunPosition);
</script>

<sun-position class="fixed top-4 left-4 z-50 transition-all duration-300 opacity-0">
  <!-- Collapsed sun icon -->
  <div class="sun-icon-wrapper cursor-pointer bg-amber-900/80 rounded-full p-3 shadow-lg hover:bg-amber-800/80 transition-colors duration-300">
    <div class="sun-icon-container relative">
      <div class="sun-icon h-10 w-10 rounded-full bg-amber-300 shadow-lg flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-amber-900">
          <circle cx="12" cy="12" r="5"></circle>
          <line x1="12" y1="1" x2="12" y2="3"></line>
          <line x1="12" y1="21" x2="12" y2="23"></line>
          <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
          <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
          <line x1="1" y1="12" x2="3" y2="12"></line>
          <line x1="21" y1="12" x2="23" y2="12"></line>
          <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
          <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </svg>
      </div>
    </div>
  </div>

  <!-- Expanded sun card -->
  <div class="sun-card absolute top-0 left-0 opacity-0 hidden p-5 rounded-xl bg-amber-900/80 shadow-lg text-white md:w-80 mt-12 select-none" style="display: none;">
    <button class="sun-close-btn absolute top-2 right-2 text-amber-200 hover:text-white transition-colors">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <line x1="18" y1="6" x2="6" y2="18"></line>
        <line x1="6" y1="6" x2="18" y2="18"></line>
      </svg>
    </button>
    
    <div class="text-center mb-4">
      <p class="text-sm text-amber-200" data-date>--/--</p>
      <h2 class="text-xl font-medium">Sun Position</h2>
    </div>
    
    <!-- Sun position visualization -->
    <div class="w-full h-14 relative mb-6">
      <div class="absolute top-0 left-0 right-0 h-2 bg-amber-500/30 rounded-full overflow-hidden">
        <!-- Daytime arc -->
        <div class="h-full bg-gradient-to-r from-amber-400/0 via-amber-400 to-amber-400/0"></div>
      </div>
      
      <!-- Sun position indicator -->
      <div class="sun-position-indicator absolute top-0 transform -translate-x-1/2 transition-all duration-500">
        <div class="w-5 h-5 rounded-full bg-amber-300 shadow-md translate-y-[-6px]"></div>
      </div>
      
      <!-- Labels -->
      <div class="flex justify-between mt-5 text-sm text-amber-200/70">
        <span>Sunrise</span>
        <span>Midday</span>
        <span>Sunset</span>
      </div>
    </div>
    
    <div class="sun-times grid grid-cols-3 gap-3 w-full text-center">
      <div class="sun-rise">
        <p class="text-amber-200 text-sm">Rise</p>
        <p class="font-medium text-base" data-sun-rise>--:--</p>
      </div>
      <div class="day-length">
        <p class="text-amber-200 text-sm">Day Length</p>
        <p class="font-medium text-base" data-day-length>--h --m</p>
      </div>
      <div class="sun-set">
        <p class="text-amber-200 text-sm">Set</p>
        <p class="font-medium text-base" data-sun-set>--:--</p>
      </div>
    </div>
  </div>
</sun-position>

<style>
  .sun-card {
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255, 165, 0, 0.1);
  }
  
  /* Transition for collapsible state */
  sun-position.is-expanded .sun-card {
    display: flex !important;
    opacity: 1 !important;
    transition: opacity 0.3s ease;
  }
  
  sun-position.is-expanded .sun-icon-wrapper {
    transform: scale(0);
    opacity: 0;
  }
</style>